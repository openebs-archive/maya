#!/bin/bash
# Copyright 2020 The OpenEBS Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

if [ "$#" -ne 3 ]; then
    echo "Error: Unable to create a new release. Missing required input."
    echo "Usage: $0 <github org/repo> <tag-name> <branch-name>"
    echo "Example: $0 kmova/bootstrap v1.0.0 master"
    exit 1
fi

C_GIT_URL=$(echo "https://api.github.com/repos/$1/releases")
C_GIT_TAG_NAME=$2
C_GIT_TAG_BRANCH=$3

if [ -z ${GIT_NAME} ];
then
  echo "Error: Environment variable GIT_NAME not found. Please set it to proceed.";
  echo "GIT_NAME should be a valid GitHub username.";
  exit 1
fi

if [ -z ${GIT_TOKEN} ];
then
  echo "Error: Environment variable GIT_TOKEN not found. Please set it to proceed.";
  echo "GIT_TOKEN should be a valid GitHub token associated with GitHub username.";
  echo "GIT_TOKEN should be configured with required permissions to create new release.";
  exit 1
fi

RELEASE_CREATE_JSON=$(echo \
{ \
 \"tag_name\":\"${C_GIT_TAG_NAME}\", \
 \"target_commitish\":\"${C_GIT_TAG_BRANCH}\", \
 \"name\":\"${C_GIT_TAG_NAME}\", \
 \"body\":\"Release created via $0\", \
 \"draft\":false, \
 \"prerelease\":false \
} \
)

#delete the temporary response file that might 
#have been left around by previous run of the command
#using a fixed name means that this script 
#is not thread safe. only one execution is permitted 
#at a time.
TEMP_RESP_FILE=temp-curl-response.txt
rm -rf ${TEMP_RESP_FILE}

#is_release_already_exist verifies the output of API for error message
#return 0 -- if release already exist
#return 1 -- if release doesn't exist
is_release_already_exist() {
	dfile=$1

	msg=$(cat $dfile | jq -r '.message')
	code=$(cat $dfile | jq -r '.errors[0].code')
	resource=$(cat $dfile | jq -r '.errors[0].resource')
	error_len=$(cat $dfile | jq '.errors | length')

	[[ "$msg" == "Validation Failed" ]] && \
		[[ "$code" == "already_exists" ]] && \
		[[ "$resource" -eq "Release" ]] && \
		[[ $error_len -eq 1 ]] && \
		echo 0 || echo 1
}


response_code=$(curl -u ${GIT_NAME}:${GIT_TOKEN} \
 -w "%{http_code}" \
 --silent \
 --output ${TEMP_RESP_FILE} \
 --url ${C_GIT_URL} \
 --request POST --header 'content-type: application/json' \
 --data "$RELEASE_CREATE_JSON")

#When embedding this script in other scripts like travis, 
#success responses like 200 can mean error. rc_code maps
#the responses to either success (0) or error (1)
rc_code=0

#Github returns 201 Created on successfully creating a new release
#201 means the request has been fulfilled and has resulted in one 
#or more new resources being created.
if [ $response_code != "201" ] && [[ $(is_release_already_exist $TEMP_RESP_FILE) -ne 0 ]]; then
    echo "Error: Unable to create release. See below response for more details"
    #The GitHub error response is pretty well formatted.
    #Printing the body gives all the details to fix the errors
    #Sample response when the branch already exists looks like this:
    #{
    #  "message": "Validation Failed",
    #  "errors": [
    #    {
    #      "resource": "Release",
    #      "code": "already_exists",
    #      "field": "tag_name"
    #    }
    #  ],
    #  "documentation_url": "https://developer.github.com/v3/repos/releases/#create-a-release"
    #}
    rc_code=1
else
    #Note. In case of success, lots of details of returned, but just 
    #knowing that creation worked is all that matters now.
    echo "Successfully tagged $1 with release tag ${C_GIT_TAG_NAME} on branch ${C_GIT_TAG_BRANCH}"
fi
cat ${TEMP_RESP_FILE}

#delete the temporary response file
rm -rf ${TEMP_RESP_FILE}

exit ${rc_code}
