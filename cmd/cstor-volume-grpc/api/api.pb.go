// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VolumeCommand struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Volume               string   `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapname             string   `protobuf:"bytes,3,opt,name=snapname,proto3" json:"snapname,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeCommand) Reset()         { *m = VolumeCommand{} }
func (m *VolumeCommand) String() string { return proto.CompactTextString(m) }
func (*VolumeCommand) ProtoMessage()    {}
func (*VolumeCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3a2982b855cc159c, []int{0}
}
func (m *VolumeCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeCommand.Unmarshal(m, b)
}
func (m *VolumeCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeCommand.Marshal(b, m, deterministic)
}
func (dst *VolumeCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeCommand.Merge(dst, src)
}
func (m *VolumeCommand) XXX_Size() int {
	return xxx_messageInfo_VolumeCommand.Size(m)
}
func (m *VolumeCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeCommand.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeCommand proto.InternalMessageInfo

func (m *VolumeCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *VolumeCommand) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *VolumeCommand) GetSnapname() string {
	if m != nil {
		return m.Snapname
	}
	return ""
}

func (m *VolumeCommand) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*VolumeCommand)(nil), "api.VolumeCommand")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunCommandClient is the client API for RunCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunCommandClient interface {
	RunVolumeCommand(ctx context.Context, in *VolumeCommand, opts ...grpc.CallOption) (*VolumeCommand, error)
}

type runCommandClient struct {
	cc *grpc.ClientConn
}

func NewRunCommandClient(cc *grpc.ClientConn) RunCommandClient {
	return &runCommandClient{cc}
}

func (c *runCommandClient) RunVolumeCommand(ctx context.Context, in *VolumeCommand, opts ...grpc.CallOption) (*VolumeCommand, error) {
	out := new(VolumeCommand)
	err := c.cc.Invoke(ctx, "/api.RunCommand/RunVolumeCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunCommandServer is the server API for RunCommand service.
type RunCommandServer interface {
	RunVolumeCommand(context.Context, *VolumeCommand) (*VolumeCommand, error)
}

func RegisterRunCommandServer(s *grpc.Server, srv RunCommandServer) {
	s.RegisterService(&_RunCommand_serviceDesc, srv)
}

func _RunCommand_RunVolumeCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunCommandServer).RunVolumeCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RunCommand/RunVolumeCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunCommandServer).RunVolumeCommand(ctx, req.(*VolumeCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RunCommand",
	HandlerType: (*RunCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunVolumeCommand",
			Handler:    _RunCommand_RunVolumeCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_3a2982b855cc159c) }

var fileDescriptor_api_3a2982b855cc159c = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x2a, 0xe5, 0xe2, 0x0d, 0xcb,
	0xcf, 0x29, 0xcd, 0x4d, 0x75, 0xce, 0xcf, 0xcd, 0x4d, 0xcc, 0x4b, 0x11, 0x92, 0xe0, 0x62, 0x4f,
	0x86, 0x30, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x31, 0x2e, 0xb6, 0x32,
	0xb0, 0x52, 0x09, 0x26, 0xb0, 0x04, 0x94, 0x27, 0x24, 0xc5, 0xc5, 0x51, 0x9c, 0x97, 0x58, 0x90,
	0x97, 0x98, 0x9b, 0x2a, 0xc1, 0x0c, 0x96, 0x81, 0xf3, 0x41, 0x7a, 0x8a, 0x4b, 0x12, 0x4b, 0x4a,
	0x8b, 0x25, 0x58, 0x20, 0x7a, 0x20, 0x3c, 0x23, 0x2f, 0x2e, 0xae, 0xa0, 0xd2, 0x3c, 0x98, 0x9d,
	0x36, 0x5c, 0x02, 0x41, 0xa5, 0x79, 0xa8, 0xee, 0x10, 0xd2, 0x03, 0xb9, 0x14, 0x45, 0x4c, 0x0a,
	0x8b, 0x98, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x3b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67,
	0xa8, 0xde, 0x3c, 0xdb, 0x00, 0x00, 0x00,
}
