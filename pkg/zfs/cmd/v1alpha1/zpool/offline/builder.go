/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package poffline

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "offline"
)

//PoolOffline defines structure for pool 'Offline' operation
type PoolOffline struct {
	// force fault
	ForceOffline bool

	// offline temporary
	isTemporary bool

	// pool name
	Pool string

	//list of offline devices
	Devicelist []string

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewPoolOffline returns new instance of object PoolOffline
func NewPoolOffline() *PoolOffline {
	return &PoolOffline{}
}

// WithCheck add given check to checks list
func (p *PoolOffline) WithCheck(check ...PredicateFunc) *PoolOffline {
	p.checks = append(p.checks, check...)
	return p
}

// WithForceOffline method fills the ForceOffline field of PoolOffline object.
func (p *PoolOffline) WithForceOffline(ForceOffline bool) *PoolOffline {
	p.ForceOffline = ForceOffline
	return p
}

// WithisTemporary method fills the isTemporary field of PoolOffline object.
func (p *PoolOffline) WithisTemporary(isTemporary bool) *PoolOffline {
	p.isTemporary = isTemporary
	return p
}

// WithPool method fills the Pool field of PoolOffline object.
func (p *PoolOffline) WithPool(Pool string) *PoolOffline {
	p.Pool = Pool
	return p
}

// WithDevicelist method fills the Devicelist field of PoolOffline object.
func (p *PoolOffline) WithDevicelist(device string) *PoolOffline {
	p.Devicelist = append(p.Devicelist, device)
	return p
}

// WithCommand method fills the Command field of PoolOffline object.
func (p *PoolOffline) WithCommand(Command string) *PoolOffline {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolOffline object by builder
func (p *PoolOffline) Validate() *PoolOffline {
	for _, check := range p.checks {
		if !check(p) {
			p.err = errors.Wrapf(p.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return p
}

// Execute is to execute generated PoolOffline object
func (p *PoolOffline) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.BASH, "-c", p.Command).CombinedOutput()
}

// Build returns the PoolOffline object generated by builder
func (p *PoolOffline) Build() (*PoolOffline, error) {
	var c strings.Builder
	p = p.Validate()
	p.appendCommand(&c, bin.ZPOOL)
	p.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsTemporarySet()(p) {
		p.appendCommand(&c, fmt.Sprintf(" -t "))
	}

	p.appendCommand(&c, fmt.Sprintf(" %s ", p.Pool))

	if IsDevicelistSet()(p) {
		for _, d := range p.Devicelist {
			p.appendCommand(&c, fmt.Sprintf(" %s ", d))
		}
	}
	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolOffline) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
