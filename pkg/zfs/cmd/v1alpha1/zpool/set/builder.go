/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package pset

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "set"
)

//PoolSProperty defines structure for pool 'set Property' operation
type PoolSProperty struct {
	//list of property
	PropList []string

	//pool name
	Pool string

	//command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewPoolSProperty returns new instance of object PoolSProperty
func NewPoolSProperty() *PoolSProperty {
	return &PoolSProperty{}
}

// WithCheck add given check to checks list
func (p *PoolSProperty) WithCheck(check ...PredicateFunc) *PoolSProperty {
	p.checks = append(p.checks, check...)
	return p
}

// WithProperty method fills the PropList field of PoolSProperty object.
func (p *PoolSProperty) WithProperty(key, value string) *PoolSProperty {
	p.PropList = append(p.PropList, fmt.Sprintf("%s=%s", key, value))
	return p
}

// WithPool method fills the Pool field of PoolSProperty object.
func (p *PoolSProperty) WithPool(Pool string) *PoolSProperty {
	p.Pool = Pool
	return p
}

// WithCommand method fills the Command field of PoolSProperty object.
func (p *PoolSProperty) WithCommand(Command string) *PoolSProperty {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolSProperty object by builder
func (p *PoolSProperty) Validate() *PoolSProperty {
	for _, check := range p.checks {
		if !check(p) {
			p.err = errors.Wrapf(p.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return p
}

// Execute is to execute generated PoolSProperty object
func (p *PoolSProperty) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.ZPOOL, p.Command).CombinedOutput()
}

// Build returns the PoolSProperty object generated by builder
func (p *PoolSProperty) Build() (*PoolSProperty, error) {
	var c strings.Builder
	p = p.Validate()

	p.appendCommand(c, fmt.Sprintf(" %s ", Operation))

	if IsPropListSet()(p) {
		for _, v := range p.PropList {
			p.appendCommand(c, fmt.Sprintf(" %s ", v))
		}
	}
	p.appendCommand(c, p.Pool)
	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolSProperty) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
