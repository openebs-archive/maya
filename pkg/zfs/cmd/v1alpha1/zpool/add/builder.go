/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package padd

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "add"
)

//PoolExpansion defines structure for pool 'Expansion' operation
type PoolExpansion struct {
	// list of vdev to add
	VdevList []string

	// property list
	Property []string

	// name of pool
	Pool string

	// Forcefully .. with -f
	Forcefully bool

	// command string
	Command string

	// DeviceType
	DeviceType string

	// Type of config.. like mirror
	Type string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewPoolExpansion returns new instance of object PoolExpansion
func NewPoolExpansion() *PoolExpansion {
	return &PoolExpansion{}
}

// WithCheck add given check to checks list
func (p *PoolExpansion) WithCheck(check ...PredicateFunc) *PoolExpansion {
	p.checks = append(p.checks, check...)
	return p
}

// WithVdevList method fills the VdevList field of PoolExpansion object.
func (p *PoolExpansion) WithVdevList(vdevlist []string) *PoolExpansion {
	p.VdevList = append(p.VdevList, vdevlist...)
	return p
}

// WithProperty method fills the Property field of PoolExpansion object.
func (p *PoolExpansion) WithProperty(key, value string) *PoolExpansion {
	p.Property = append(p.Property, fmt.Sprintf("%s=%s", key, value))
	return p
}

// WithForcefully method fills the Forcefully field of PoolExpansion object.
func (p *PoolExpansion) WithForcefully(Forcefully bool) *PoolExpansion {
	p.Forcefully = Forcefully
	return p
}

// WithPool method fills the Pool field of PoolExpansion object.
func (p *PoolExpansion) WithPool(Pool string) *PoolExpansion {
	p.Pool = Pool
	return p
}

// WithDeviceType method fills the DeviceType field of PoolExpansion object.
func (p *PoolExpansion) WithDeviceType(DeviceType string) *PoolExpansion {
	p.DeviceType = DeviceType
	return p
}

// WithType method fills the Type field of PoolExpansion object.
func (p *PoolExpansion) WithType(Type string) *PoolExpansion {
	p.Type = Type
	return p
}

// WithCommand method fills the Command field of PoolExpansion object.
func (p *PoolExpansion) WithCommand(Command string) *PoolExpansion {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolExpansion object by builder
func (p *PoolExpansion) Validate() *PoolExpansion {
	for _, check := range p.checks {
		if !check(p) {
			p.err = errors.Wrapf(p.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return p
}

// Execute is to execute generated PoolExpansion object
func (p *PoolExpansion) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.ZPOOL, p.Command).CombinedOutput()
}

// Build returns the PoolExpansion object generated by builder
func (p *PoolExpansion) Build() (*PoolExpansion, error) {
	var c strings.Builder
	p = p.Validate()
	p.appendCommand(c, fmt.Sprintf(" %s ", Operation))

	if IsForcefullySet()(p) {
		p.appendCommand(c, fmt.Sprintf(" -f "))
	}

	if IsPropertySet()(p) {
		for _, v := range p.Property {
			p.appendCommand(c, fmt.Sprintf(" -o %s ", v))
		}
	}

	p.appendCommand(c, p.Pool)

	if IsDeviceTypeSet()(p) {
		p.appendCommand(c, fmt.Sprintf(" %s ", p.Type))
	}

	if IsTypeSet()(p) {
		p.appendCommand(c, fmt.Sprintf(" %s ", p.Type))
	}

	for _, v := range p.VdevList {
		p.appendCommand(c, fmt.Sprintf(" %s ", v))
	}

	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolExpansion) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
