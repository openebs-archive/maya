/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package pexport

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "export"
)

//PoolExport defines structure for pool 'Export' operation
type PoolExport struct {
	// all pools
	AllPool bool

	//forcefully export
	Forcefully bool

	//list of pool to be exported
	PoolList []string

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewPoolExport returns new instance of object PoolExport
func NewPoolExport() *PoolExport {
	return &PoolExport{}
}

// WithCheck add given check to checks list
func (p *PoolExport) WithCheck(check ...PredicateFunc) *PoolExport {
	p.checks = append(p.checks, check...)
	return p
}

// WithAllPool method fills the AllPool field of PoolExport object.
func (p *PoolExport) WithAllPool(AllPool bool) *PoolExport {
	p.AllPool = AllPool
	return p
}

// WithForcefully method fills the Forcefully field of PoolExport object.
func (p *PoolExport) WithForcefully(Forcefully bool) *PoolExport {
	p.Forcefully = Forcefully
	return p
}

// WithPool method fills the PoolList field of PoolExport object.
func (p *PoolExport) WithPool(pool string) *PoolExport {
	p.PoolList = append(p.PoolList, pool)
	return p
}

// WithCommand method fills the Command field of PoolExport object.
func (p *PoolExport) WithCommand(Command string) *PoolExport {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolExport object by builder
func (p *PoolExport) Validate() *PoolExport {
	for _, check := range p.checks {
		if !check(p) {
			p.err = errors.Wrapf(p.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return p
}

// Execute is to execute generated PoolExport object
func (p *PoolExport) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.BASH, "-c", p.Command).CombinedOutput()
}

// Build returns the PoolExport object generated by builder
func (p *PoolExport) Build() (*PoolExport, error) {
	var c strings.Builder
	p = p.Validate()
	p.appendCommand(&c, bin.ZPOOL)
	p.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsForcefullySet()(p) {
		p.appendCommand(&c, fmt.Sprintf(" -f "))
	}

	for _, i := range p.PoolList {
		p.appendCommand(&c, fmt.Sprintf(" %s ", i))
	}

	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolExport) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
