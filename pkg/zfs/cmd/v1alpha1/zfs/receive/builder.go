/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vsnapshotrecv

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "receive"
)

//VolumeSnapshotRecv defines structure for volume 'Snapshot' operation
type VolumeSnapshotRecv struct {
	//name of snapshot
	Snapshot string

	//name of dataset on which snapshot should be taken
	Dataset string

	//remote destination for snapshot send/recv using nc
	Target string

	// to send incremental snapshot
	LastSnapshot string

	// Generate a deduplicated stream
	Dedup bool

	// dry-run
	DryRun bool

	// use compression for zfs send
	EnableCompression bool

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewVolumeSnapshotRecv returns new instance of object VolumeSnapshotRecv
func NewVolumeSnapshotRecv() *VolumeSnapshotRecv {
	return &VolumeSnapshotRecv{}
}

// WithCheck add given check to checks list
func (v *VolumeSnapshotRecv) WithCheck(check ...PredicateFunc) *VolumeSnapshotRecv {
	v.checks = append(v.checks, check...)
	return v
}

// WithSnapshot method fills the Snapshot field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithSnapshot(Snapshot string) *VolumeSnapshotRecv {
	v.Snapshot = Snapshot
	return v
}

// WithDataset method fills the Dataset field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithDataset(Dataset string) *VolumeSnapshotRecv {
	v.Dataset = Dataset
	return v
}

// WithTarget method fills the Target field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithTarget(Target string) *VolumeSnapshotRecv {
	v.Target = Target
	return v
}

// WithDedup method fills the Dedup field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithDedup(Dedup bool) *VolumeSnapshotRecv {
	v.Dedup = Dedup
	return v
}

// WithLastSnapshot method fills the LastSnapshot field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithLastSnapshot(LastSnapshot string) *VolumeSnapshotRecv {
	v.LastSnapshot = LastSnapshot
	return v
}

// WithDryRun method fills the DryRun field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithDryRun(DryRun bool) *VolumeSnapshotRecv {
	v.DryRun = DryRun
	return v
}

// WithEnableCompression method fills the EnableCompression field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithEnableCompression(EnableCompression bool) *VolumeSnapshotRecv {
	v.EnableCompression = EnableCompression
	return v
}

// WithCommand method fills the Command field of VolumeSnapshotRecv object.
func (v *VolumeSnapshotRecv) WithCommand(Command string) *VolumeSnapshotRecv {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeSnapshotRecv object by builder
func (v *VolumeSnapshotRecv) Validate() *VolumeSnapshotRecv {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeSnapshotRecv object
func (v *VolumeSnapshotRecv) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeSnapshotRecv object generated by builder
func (v *VolumeSnapshotRecv) Build() (*VolumeSnapshotRecv, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))
	if IsDedupSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -D "))
	}

	if IsLastSnapshotSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -i @%s ", v.LastSnapshot))
	}

	v.appendCommand(&c, fmt.Sprintf(" %s@%s ", v.Dataset, v.Snapshot))
	v.appendCommand(&c, fmt.Sprintf(" | nc %s", v.Target))

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeSnapshotRecv) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
