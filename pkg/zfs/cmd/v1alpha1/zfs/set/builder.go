/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vset

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "set"
)

//VolumeSetProperty defines structure for volume 'Property' operation
type VolumeSetProperty struct {
	//list of property
	Proplist []string

	//dataset name
	Dataset string

	//snapshot name
	Snapshot string

	//command for this structure
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewVolumeSetProperty returns new instance of object VolumeSetProperty
func NewVolumeSetProperty() *VolumeSetProperty {
	return &VolumeSetProperty{}
}

// WithCheck add given check to checks list
func (v *VolumeSetProperty) WithCheck(check ...PredicateFunc) *VolumeSetProperty {
	v.checks = append(v.checks, check...)
	return v
}

// WithProperty method fills the Proplist field of VolumeSetProperty object.
func (v *VolumeSetProperty) WithProperty(key, value string) *VolumeSetProperty {
	v.Proplist = append(v.Proplist, fmt.Sprintf("%s=%s", key, value))
	return v
}

// WithDataset method fills the Dataset field of VolumeSetProperty object.
func (v *VolumeSetProperty) WithDataset(Dataset string) *VolumeSetProperty {
	v.Dataset = Dataset
	return v
}

// WithSnapshot method fills the Snapshot field of VolumeSetProperty object.
func (v *VolumeSetProperty) WithSnapshot(Snapshot string) *VolumeSetProperty {
	v.Snapshot = Snapshot
	return v
}

// WithCommand method fills the Command field of VolumeSetProperty object.
func (v *VolumeSetProperty) WithCommand(Command string) *VolumeSetProperty {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeSetProperty object by builder
func (v *VolumeSetProperty) Validate() *VolumeSetProperty {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeSetProperty object
func (v *VolumeSetProperty) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	// #nosec
	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeSetProperty object generated by builder
func (v *VolumeSetProperty) Build() (*VolumeSetProperty, error) {
	var c strings.Builder

	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsProplistSet()(v) {
		for _, p := range v.Proplist {
			v.appendCommand(&c, fmt.Sprintf(" %s ", p))
		}
	}

	v.appendCommand(&c, v.Dataset)

	if IsSnapshotSet()(v) {
		v.appendCommand(&c, fmt.Sprintf("@%s", v.Snapshot))
	}

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeSetProperty) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
