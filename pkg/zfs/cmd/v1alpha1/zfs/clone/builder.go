/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vclone

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "clone"
)

//VolumeClone defines structure for volume 'Clone' operation
type VolumeClone struct {
	//snapshot from where clone needs to be created
	Snapshot string

	//targeted dataset name
	TargetDataset string

	//source dataset name
	SourceDataset string

	//property for dataset
	Property []string

	//createall the non-existing parent datasets
	CreateParent bool

	//command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewVolumeClone returns new instance of object VolumeClone
func NewVolumeClone() *VolumeClone {
	return &VolumeClone{}

}

// WithCheck add given check to checks list
func (v *VolumeClone) WithCheck(check ...PredicateFunc) *VolumeClone {
	v.checks = append(v.checks, check...)
	return v
}

// WithSnapshot method fills the Snapshot field of VolumeClone object.
func (v *VolumeClone) WithSnapshot(Snapshot string) *VolumeClone {
	v.Snapshot = Snapshot
	return v
}

// WithTargetDataset method fills the TargetDataset field of VolumeClone object.
func (v *VolumeClone) WithTargetDataset(TargetDataset string) *VolumeClone {
	v.TargetDataset = TargetDataset
	return v
}

// WithSourceDataset method fills the SourceDataset field of VolumeClone object.
func (v *VolumeClone) WithSourceDataset(SourceDataset string) *VolumeClone {
	v.SourceDataset = SourceDataset
	return v
}

// WithProperty method fills the Property field of VolumeClone object.
func (v *VolumeClone) WithProperty(key, value string) *VolumeClone {
	v.SetProperty(key, value)
	return v
}

// WithCreateParent method fills the CreateParent field of VolumeClone object.
func (v *VolumeClone) WithCreateParent(CreateParent bool) *VolumeClone {
	v.CreateParent = CreateParent
	return v
}

// WithCommand method fills the Command field of VolumeClone object.
func (v *VolumeClone) WithCommand(Command string) *VolumeClone {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeClone object by builder
func (v *VolumeClone) Validate() *VolumeClone {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeClone object
func (v *VolumeClone) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}

	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeClone object generated by builder
func (v *VolumeClone) Build() (*VolumeClone, error) {
	var c strings.Builder

	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)
	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	v.appendCommand(&c, fmt.Sprintf("%s@%s ", v.SourceDataset, v.Snapshot))

	v.appendCommand(&c, v.TargetDataset)

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeClone) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
