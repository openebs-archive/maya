/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vrename

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "rename"
)

//VolumeRename defines structure for volume 'Rename' operation
type VolumeRename struct {
	//createall the non-existing parent datasets
	CreateParent bool

	//forceunmount the file-system
	ForceUnmount bool

	//name of the dataset/snapshot to be renamed
	Source string

	//new name for dataset/snapshot
	Dest string

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewVolumeRename returns new instance of object VolumeRename
func NewVolumeRename() *VolumeRename {
	return &VolumeRename{}
}

// WithCheck add given check to checks list
func (v *VolumeRename) WithCheck(check ...PredicateFunc) *VolumeRename {
	v.checks = append(v.checks, check...)
	return v
}

// WithCreateParent method fills the CreateParent field of VolumeRename object.
func (v *VolumeRename) WithCreateParent(CreateParent bool) *VolumeRename {
	v.CreateParent = CreateParent
	return v
}

// WithForceUnmount method fills the ForceUnmount field of VolumeRename object.
func (v *VolumeRename) WithForceUnmount(ForceUnmount bool) *VolumeRename {
	v.ForceUnmount = ForceUnmount
	return v
}

// WithSource method fills the Source field of VolumeRename object.
func (v *VolumeRename) WithSource(Source string) *VolumeRename {
	v.Source = Source
	return v
}

// WithDest method fills the Dest field of VolumeRename object.
func (v *VolumeRename) WithDest(Dest string) *VolumeRename {
	v.Dest = Dest
	return v
}

// WithCommand method fills the Command field of VolumeRename object.
func (v *VolumeRename) WithCommand(Command string) *VolumeRename {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeRename object by builder
func (v *VolumeRename) Validate() *VolumeRename {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeRename object
func (v *VolumeRename) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeRename object generated by builder
func (v *VolumeRename) Build() (*VolumeRename, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)
	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsCreateParentSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" p"))
	}

	v.appendCommand(&c, fmt.Sprintf("%s %s", v.Source, v.Dest))

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeRename) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
