/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vrollback

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/maya/pkg/zfs/cmd/v1alpha1/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "rollback"
)

//VolumeRollback defines structure for volume 'Rollback' operation
type VolumeRollback struct {
	//destroy any more recent snapshots and bookmarks, as well as any clones of those snapshots
	Destroy bool

	//forceunmount the file-system
	ForceUnmount bool

	//Destroy any snapshots and bookmarks more recent than the one specified.
	DestroySnap bool

	//snapshot name
	Snapshot string

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error
}

// NewVolumeRollback returns new instance of object VolumeRollback
func NewVolumeRollback() *VolumeRollback {
	return &VolumeRollback{}
}

// WithCheck add given check to checks list
func (v *VolumeRollback) WithCheck(check ...PredicateFunc) *VolumeRollback {
	v.checks = append(v.checks, check...)
	return v
}

// WithDestroy method fills the Destroy field of VolumeRollback object.
func (v *VolumeRollback) WithDestroy(Destroy bool) *VolumeRollback {
	v.Destroy = Destroy
	return v
}

// WithForceUnmount method fills the ForceUnmount field of VolumeRollback object.
func (v *VolumeRollback) WithForceUnmount(ForceUnmount bool) *VolumeRollback {
	v.ForceUnmount = ForceUnmount
	return v
}

// WithDestroySnap method fills the DestroySnap field of VolumeRollback object.
func (v *VolumeRollback) WithDestroySnap(DestroySnap bool) *VolumeRollback {
	v.DestroySnap = DestroySnap
	return v
}

// WithSnapshot method fills the Snapshot field of VolumeRollback object.
func (v *VolumeRollback) WithSnapshot(Snapshot string) *VolumeRollback {
	v.Snapshot = Snapshot
	return v
}

// WithCommand method fills the Command field of VolumeRollback object.
func (v *VolumeRollback) WithCommand(Command string) *VolumeRollback {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeRollback object by builder
func (v *VolumeRollback) Validate() *VolumeRollback {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeRollback object
func (v *VolumeRollback) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
}

// Build returns the VolumeRollback object generated by builder
func (v *VolumeRollback) Build() (*VolumeRollback, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)
	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsDestroySet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -R "))
		if IsForceUnmountSet()(v) {
			v.appendCommand(&c, fmt.Sprintf(" -f "))
		}

	}

	if IsDestroySnapSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -r "))
	}

	v.appendCommand(&c, v.Snapshot)

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeRollback) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
