/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package zfs

import (
	"fmt"
	"os/exec"
	"strings"

	zfs "github.com/openebs/maya/pkg/zfs/v1alpha1"
	"github.com/pkg/errors"
)

//VolumeProperty defines structure for volume 'Property' operation
type VolumeProperty struct {
	//list of property
	Proplist []string

	//set property
	OpSet bool

	//dataset name
	Dataset string

	//snapshot name
	Snapshot string

	//command for this structure
	Command string

	// predicatelist is list of predicate function used for validating object
	predicatelist []PredicateFunc

	// error
	err error
}

// NewVolumeProperty returns new instance of object VolumeProperty
func NewVolumeProperty() *VolumeProperty {
	return &VolumeProperty{}
}

// WithCheck add given predicate to predicate list
func (v *VolumeProperty) WithCheck(pred ...PredicateFunc) *VolumeProperty {
	v.predicatelist = append(v.predicatelist, pred...)
	return v
}

// WithProperty method fills the Proplist field of VolumeProperty object.
func (v *VolumeProperty) WithProperty(key, value string) *VolumeProperty {
	v.Proplist = append(v.Proplist, fmt.Sprintf("%s=%s", key, value))
	return v
}

// WithOpSet method fills the OpSet field of VolumeProperty object.
func (v *VolumeProperty) WithOpSet(OpSet bool) *VolumeProperty {
	v.OpSet = OpSet
	return v
}

// WithDataset method fills the Dataset field of VolumeProperty object.
func (v *VolumeProperty) WithDataset(Dataset string) *VolumeProperty {
	v.Dataset = Dataset
	return v
}

// WithSnapshot method fills the Snapshot field of VolumeProperty object.
func (v *VolumeProperty) WithSnapshot(Snapshot string) *VolumeProperty {
	v.Snapshot = Snapshot
	return v
}

// WithCommand method fills the Command field of VolumeProperty object.
func (v *VolumeProperty) WithCommand(Command string) *VolumeProperty {
	v.Command = Command
	return v
}

// Validate is to validate generated VolumeProperty object by builder
func (v *VolumeProperty) Validate() *VolumeProperty {
	if len(v.predicatelist) != 0 {
		for _, pred := range v.predicatelist {
			if !pred(v) {
				v.err = errors.Wrapf(v.err, "Failed to run predicate {%v}", pred)
			}
		}
	}
	return v
}

// Execute is to execute generated VolumeProperty object
func (v *VolumeProperty) Execute() ([]byte, error) {
	v, err := v.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(zfs.ZFS, v.Command).CombinedOutput()
}

// Build returns the VolumeProperty object generated by builder
func (v *VolumeProperty) Build() (*VolumeProperty, error) {
	var c strings.Builder

	v = v.Validate()

	if IsProplistSet()(v) {
		for _, p := range v.Proplist {
			v.appendCommand(c, fmt.Sprintf(" -o %s", p))
		}
	}

	if IsOpSet()(v) {
		v.appendCommand(c, "set")
	} else {
		v.appendCommand(c, "get")
	}

	v.appendCommand(c, v.Dataset)

	if IsSnapshotSet()(v) {
		v.appendCommand(c, fmt.Sprintf("@%s", v.Snapshot))
	}

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeProperty) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
