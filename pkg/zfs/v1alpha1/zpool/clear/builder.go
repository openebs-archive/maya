/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package zfs

import (
	"fmt"
	"os/exec"
	"strings"

	zfs "github.com/openebs/maya/pkg/zfs/v1alpha1"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "clear"
)

//PoolClear defines structure for pool 'Clear' operation
type PoolClear struct {
	// pool name
	Pool string

	// vdev list
	Vdev []string

	// command string
	Command string

	// predicatelist is list of predicate function used for validating object
	predicatelist []PredicateFunc

	// error
	err error
}

// NewPoolClear returns new instance of object PoolClear
func NewPoolClear() *PoolClear {
	return &PoolClear{}
}

// WithCheck add given predicate to predicate list
func (p *PoolClear) WithCheck(pred ...PredicateFunc) *PoolClear {
	p.predicatelist = append(p.predicatelist, pred...)
	return p
}

// WithPool method fills the Pool field of PoolClear object.
func (p *PoolClear) WithPool(Pool string) *PoolClear {
	p.Pool = Pool
	return p
}

// WithVdev method fills the Vdev field of PoolClear object.
func (p *PoolClear) WithVdev(vdev string) *PoolClear {
	p.Vdev = append(p.Vdev, vdev)
	return p
}

// WithCommand method fills the Command field of PoolClear object.
func (p *PoolClear) WithCommand(Command string) *PoolClear {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolClear object by builder
func (p *PoolClear) Validate() *PoolClear {
	if len(p.predicatelist) != 0 {
		for _, pred := range p.predicatelist {
			if !pred(p) {
				p.err = errors.Wrapf(p.err, "Failed to run predicate {%v}", pred)
			}
		}
	}
	return p
}

// Execute is to execute generated PoolClear object
func (p *PoolClear) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(zfs.ZPOOL, p.Command).CombinedOutput()
}

// Build returns the PoolClear object generated by builder
func (p *PoolClear) Build() (*PoolClear, error) {
	var c strings.Builder
	p = p.Validate()
	p.appendCommand(c, fmt.Sprintf(" %s ", Operation))

	p.appendCommand(c, p.Pool)

	for _, v := range p.Vdev {
		p.appendCommand(c, fmt.Sprintf(" %s ", v))
	}

	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolClear) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
