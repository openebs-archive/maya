/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package zfs

import (
	"fmt"
	"os/exec"
	"strings"

	zfs "github.com/openebs/maya/pkg/zfs/v1alpha1"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "create"
)

//PoolCreate defines structure for pool 'Create' operation
type PoolCreate struct {
	// property list
	Property []string

	// pool name
	Pool string

	//vdev list
	Vdev []string

	// force use of vdevs
	Forcefully bool

	// command string
	Command string

	// predicatelist is list of predicate function used for validating object
	predicatelist []PredicateFunc

	// error
	err error
}

// NewPoolCreate returns new instance of object PoolCreate
func NewPoolCreate() *PoolCreate {
	return &PoolCreate{}
}

// WithCheck add given predicate to predicate list
func (p *PoolCreate) WithCheck(pred ...PredicateFunc) *PoolCreate {
	p.predicatelist = append(p.predicatelist, pred...)
	return p
}

// WithProperty method fills the Property field of PoolCreate object.
func (p *PoolCreate) WithProperty(key, value string) *PoolCreate {
	p.Property = append(p.Property, fmt.Sprintf("%s=%s", key, value))
	return p
}

// WithPool method fills the Pool field of PoolCreate object.
func (p *PoolCreate) WithPool(Pool string) *PoolCreate {
	p.Pool = Pool
	return p
}

// WithVdev method fills the Vdev field of PoolCreate object.
func (p *PoolCreate) WithVdev(vdev string) *PoolCreate {
	p.Vdev = append(p.Vdev, vdev)
	return p
}

// WithForcefully method fills the Forcefully field of PoolCreate object.
func (p *PoolCreate) WithForcefully(Forcefully bool) *PoolCreate {
	p.Forcefully = Forcefully
	return p
}

// WithCommand method fills the Command field of PoolCreate object.
func (p *PoolCreate) WithCommand(Command string) *PoolCreate {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolCreate object by builder
func (p *PoolCreate) Validate() *PoolCreate {
	if len(p.predicatelist) != 0 {
		for _, pred := range p.predicatelist {
			if !pred(p) {
				p.err = errors.Wrapf(p.err, "Failed to run predicate {%v}", pred)
			}
		}
	}
	return p
}

// Execute is to execute generated PoolCreate object
func (p *PoolCreate) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(zfs.ZPOOL, p.Command).CombinedOutput()
}

// Build returns the PoolCreate object generated by builder
func (p *PoolCreate) Build() (*PoolCreate, error) {
	var c strings.Builder
	p = p.Validate()
	p.appendCommand(c, fmt.Sprintf(" %s ", Operation))

	//TODO how to handle raidz, mirror type... through vdev?
	if IsForcefullySet()(p) {
		p.appendCommand(c, fmt.Sprintf(" -f "))
	}

	if IsPropertySet()(p) {
		for _, v := range p.Property {
			p.appendCommand(c, fmt.Sprintf(" -o %s ", v))
		}
	}

	p.appendCommand(c, p.Pool)

	for _, v := range p.Vdev {
		p.appendCommand(c, fmt.Sprintf(" %s ", v))
	}

	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolCreate) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
