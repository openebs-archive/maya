/*
Copyright 2019 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package zfs

import (
	"fmt"
	"os/exec"
	"strings"

	zfs "github.com/openebs/maya/pkg/zfs/v1alpha1"
	"github.com/pkg/errors"
)

//PoolProperty defines structure for pool 'Property' operation
type PoolProperty struct {
	//list of property
	PropList []string

	//set property
	OpSet bool

	//pool name
	Pool string

	//command string
	Command string

	// predicatelist is list of predicate function used for validating object
	predicatelist []PredicateFunc

	// error
	err error
}

// NewPoolProperty returns new instance of object PoolProperty
func NewPoolProperty() *PoolProperty {
	return &PoolProperty{}
}

// WithCheck add given predicate to predicate list
func (p *PoolProperty) WithCheck(pred ...PredicateFunc) *PoolProperty {
	p.predicatelist = append(p.predicatelist, pred...)
	return p
}

// WithProperty method fills the PropList field of PoolProperty object.
func (p *PoolProperty) WithProperty(key, value string) *PoolProperty {
	p.PropList = append(p.PropList, fmt.Sprintf("%s=%s", key, value))
	return p
}

// WithOpSet method fills the OpSet field of PoolProperty object.
func (p *PoolProperty) WithOpSet(OpSet bool) *PoolProperty {
	p.OpSet = OpSet
	return p
}

// WithPool method fills the Pool field of PoolProperty object.
func (p *PoolProperty) WithPool(Pool string) *PoolProperty {
	p.Pool = Pool
	return p
}

// WithCommand method fills the Command field of PoolProperty object.
func (p *PoolProperty) WithCommand(Command string) *PoolProperty {
	p.Command = Command
	return p
}

// Validate is to validate generated PoolProperty object by builder
func (p *PoolProperty) Validate() *PoolProperty {
	if len(p.predicatelist) != 0 {
		for _, pred := range p.predicatelist {
			if !pred(p) {
				p.err = errors.Wrapf(p.err, "Failed to run predicate {%v}", pred)
			}
		}
	}
	return p
}

// Execute is to execute generated PoolProperty object
func (p *PoolProperty) Execute() ([]byte, error) {
	p, err := p.Build()
	if err != nil {
		return nil, err
	}
	// execute command here
	return exec.Command(zfs.ZPOOL, p.Command).CombinedOutput()
}

// Build returns the PoolProperty object generated by builder
func (p *PoolProperty) Build() (*PoolProperty, error) {
	var c strings.Builder
	p = p.Validate()

	if IsOpSet()(p) {
		p.appendCommand(c, fmt.Sprintf(" set "))
	} else {
		p.appendCommand(c, fmt.Sprintf(" get "))
	}

	if IsPropListSet()(p) {
		for _, v := range p.PropList {
			p.appendCommand(c, fmt.Sprintf(" -o %s ", v))
		}
	}
	p.appendCommand(c, p.Pool)
	p.Command = c.String()
	return p, p.err
}

// appendCommand append string to given string builder
func (p *PoolProperty) appendCommand(c strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		p.err = errors.Wrapf(p.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
