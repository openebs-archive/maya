/*
Copyright 2017 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1

import (
	openebs_io_v1 "github.com/openebs/maya/pkg/storagepool-apis/openebs.io/v1"
	versioned "github.com/openebs/maya/pkg/storagepool-client/clientset/versioned"
	internalinterfaces "github.com/openebs/maya/pkg/storagepool-client/informers/externalversions/internalinterfaces"
	v1 "github.com/openebs/maya/pkg/storagepool-client/listers/example/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// StoragepoolInformer provides access to a shared informer and lister for
// Storagepools.
type StoragepoolInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.StoragepoolLister
}

type storagepoolInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewStoragepoolInformer constructs a new informer for Storagepool type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewStoragepoolInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.ExampleV1().Storagepools(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.ExampleV1().Storagepools(namespace).Watch(options)
			},
		},
		&openebs_io_v1.Storagepool{},
		resyncPeriod,
		indexers,
	)
}

func defaultStoragepoolInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewStoragepoolInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *storagepoolInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&openebs_io_v1.Storagepool{}, defaultStoragepoolInformer)
}

func (f *storagepoolInformer) Lister() v1.StoragepoolLister {
	return v1.NewStoragepoolLister(f.Informer().GetIndexer())
}
