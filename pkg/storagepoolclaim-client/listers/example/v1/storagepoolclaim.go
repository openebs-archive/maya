/*
Copyright 2017 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/openebs/maya/pkg/storagepoolclaim-apis/openebs.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StoragepoolclaimLister helps list Storagepoolclaims.
type StoragepoolclaimLister interface {
	// List lists all Storagepoolclaims in the indexer.
	List(selector labels.Selector) (ret []*v1.Storagepoolclaim, err error)
	// Storagepoolclaims returns an object that can list and get Storagepoolclaims.
	Storagepoolclaims(namespace string) StoragepoolclaimNamespaceLister
	StoragepoolclaimListerExpansion
}

// storagepoolclaimLister implements the StoragepoolclaimLister interface.
type storagepoolclaimLister struct {
	indexer cache.Indexer
}

// NewStoragepoolclaimLister returns a new StoragepoolclaimLister.
func NewStoragepoolclaimLister(indexer cache.Indexer) StoragepoolclaimLister {
	return &storagepoolclaimLister{indexer: indexer}
}

// List lists all Storagepoolclaims in the indexer.
func (s *storagepoolclaimLister) List(selector labels.Selector) (ret []*v1.Storagepoolclaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Storagepoolclaim))
	})
	return ret, err
}

// Storagepoolclaims returns an object that can list and get Storagepoolclaims.
func (s *storagepoolclaimLister) Storagepoolclaims(namespace string) StoragepoolclaimNamespaceLister {
	return storagepoolclaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StoragepoolclaimNamespaceLister helps list and get Storagepoolclaims.
type StoragepoolclaimNamespaceLister interface {
	// List lists all Storagepoolclaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Storagepoolclaim, err error)
	// Get retrieves the Storagepoolclaim from the indexer for a given namespace and name.
	Get(name string) (*v1.Storagepoolclaim, error)
	StoragepoolclaimNamespaceListerExpansion
}

// storagepoolclaimNamespaceLister implements the StoragepoolclaimNamespaceLister
// interface.
type storagepoolclaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Storagepoolclaims in the indexer for a given namespace.
func (s storagepoolclaimNamespaceLister) List(selector labels.Selector) (ret []*v1.Storagepoolclaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Storagepoolclaim))
	})
	return ret, err
}

// Get retrieves the Storagepoolclaim from the indexer for a given namespace and name.
func (s storagepoolclaimNamespaceLister) Get(name string) (*v1.Storagepoolclaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("storagepoolclaim"), name)
	}
	return obj.(*v1.Storagepoolclaim), nil
}
