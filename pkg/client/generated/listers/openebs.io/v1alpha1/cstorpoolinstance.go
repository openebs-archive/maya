/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CStorPoolInstanceLister helps list CStorPoolInstances.
type CStorPoolInstanceLister interface {
	// List lists all CStorPoolInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CStorPoolInstance, err error)
	// CStorPoolInstances returns an object that can list and get CStorPoolInstances.
	CStorPoolInstances(namespace string) CStorPoolInstanceNamespaceLister
	CStorPoolInstanceListerExpansion
}

// cStorPoolInstanceLister implements the CStorPoolInstanceLister interface.
type cStorPoolInstanceLister struct {
	indexer cache.Indexer
}

// NewCStorPoolInstanceLister returns a new CStorPoolInstanceLister.
func NewCStorPoolInstanceLister(indexer cache.Indexer) CStorPoolInstanceLister {
	return &cStorPoolInstanceLister{indexer: indexer}
}

// List lists all CStorPoolInstances in the indexer.
func (s *cStorPoolInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.CStorPoolInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorPoolInstance))
	})
	return ret, err
}

// CStorPoolInstances returns an object that can list and get CStorPoolInstances.
func (s *cStorPoolInstanceLister) CStorPoolInstances(namespace string) CStorPoolInstanceNamespaceLister {
	return cStorPoolInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CStorPoolInstanceNamespaceLister helps list and get CStorPoolInstances.
type CStorPoolInstanceNamespaceLister interface {
	// List lists all CStorPoolInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CStorPoolInstance, err error)
	// Get retrieves the CStorPoolInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CStorPoolInstance, error)
	CStorPoolInstanceNamespaceListerExpansion
}

// cStorPoolInstanceNamespaceLister implements the CStorPoolInstanceNamespaceLister
// interface.
type cStorPoolInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CStorPoolInstances in the indexer for a given namespace.
func (s cStorPoolInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CStorPoolInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorPoolInstance))
	})
	return ret, err
}

// Get retrieves the CStorPoolInstance from the indexer for a given namespace and name.
func (s cStorPoolInstanceNamespaceLister) Get(name string) (*v1alpha1.CStorPoolInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cstorpoolinstance"), name)
	}
	return obj.(*v1alpha1.CStorPoolInstance), nil
}
