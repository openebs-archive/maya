// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cstorvolume.proto

package v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VolumeSnapRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Volume               string   `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	Snapname             string   `protobuf:"bytes,3,opt,name=snapname,proto3" json:"snapname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeSnapRequest) Reset()         { *m = VolumeSnapRequest{} }
func (m *VolumeSnapRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeSnapRequest) ProtoMessage()    {}
func (*VolumeSnapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cstorvolume_f75cbcda75ddaf04, []int{0}
}
func (m *VolumeSnapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeSnapRequest.Unmarshal(m, b)
}
func (m *VolumeSnapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeSnapRequest.Marshal(b, m, deterministic)
}
func (dst *VolumeSnapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSnapRequest.Merge(dst, src)
}
func (m *VolumeSnapRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeSnapRequest.Size(m)
}
func (m *VolumeSnapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSnapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSnapRequest proto.InternalMessageInfo

func (m *VolumeSnapRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *VolumeSnapRequest) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *VolumeSnapRequest) GetSnapname() string {
	if m != nil {
		return m.Snapname
	}
	return ""
}

type VolumeSnapResponse struct {
	Status               []byte   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeSnapResponse) Reset()         { *m = VolumeSnapResponse{} }
func (m *VolumeSnapResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeSnapResponse) ProtoMessage()    {}
func (*VolumeSnapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cstorvolume_f75cbcda75ddaf04, []int{1}
}
func (m *VolumeSnapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeSnapResponse.Unmarshal(m, b)
}
func (m *VolumeSnapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeSnapResponse.Marshal(b, m, deterministic)
}
func (dst *VolumeSnapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeSnapResponse.Merge(dst, src)
}
func (m *VolumeSnapResponse) XXX_Size() int {
	return xxx_messageInfo_VolumeSnapResponse.Size(m)
}
func (m *VolumeSnapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeSnapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeSnapResponse proto.InternalMessageInfo

func (m *VolumeSnapResponse) GetStatus() []byte {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*VolumeSnapRequest)(nil), "v1alpha1.VolumeSnapRequest")
	proto.RegisterType((*VolumeSnapResponse)(nil), "v1alpha1.VolumeSnapResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunSnapCommandClient is the client API for RunSnapCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunSnapCommandClient interface {
	RunVolumeSnapCommand(ctx context.Context, in *VolumeSnapRequest, opts ...grpc.CallOption) (*VolumeSnapResponse, error)
}

type runSnapCommandClient struct {
	cc *grpc.ClientConn
}

func NewRunSnapCommandClient(cc *grpc.ClientConn) RunSnapCommandClient {
	return &runSnapCommandClient{cc}
}

func (c *runSnapCommandClient) RunVolumeSnapCommand(ctx context.Context, in *VolumeSnapRequest, opts ...grpc.CallOption) (*VolumeSnapResponse, error) {
	out := new(VolumeSnapResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.RunSnapCommand/RunVolumeSnapCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunSnapCommandServer is the server API for RunSnapCommand service.
type RunSnapCommandServer interface {
	RunVolumeSnapCommand(context.Context, *VolumeSnapRequest) (*VolumeSnapResponse, error)
}

func RegisterRunSnapCommandServer(s *grpc.Server, srv RunSnapCommandServer) {
	s.RegisterService(&_RunSnapCommand_serviceDesc, srv)
}

func _RunSnapCommand_RunVolumeSnapCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeSnapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunSnapCommandServer).RunVolumeSnapCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.RunSnapCommand/RunVolumeSnapCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunSnapCommandServer).RunVolumeSnapCommand(ctx, req.(*VolumeSnapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunSnapCommand_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.RunSnapCommand",
	HandlerType: (*RunSnapCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunVolumeSnapCommand",
			Handler:    _RunSnapCommand_RunVolumeSnapCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cstorvolume.proto",
}

func init() { proto.RegisterFile("cstorvolume.proto", fileDescriptor_cstorvolume_f75cbcda75ddaf04) }

var fileDescriptor_cstorvolume_f75cbcda75ddaf04 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2e, 0x2e, 0xc9,
	0x2f, 0x2a, 0xcb, 0xcf, 0x29, 0xcd, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28,
	0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48, 0x34, 0x54, 0x4a, 0xe4, 0x12, 0x0c, 0x03, 0xcb, 0x04, 0xe7,
	0x25, 0x16, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0x27, 0xe7, 0xe7,
	0xe6, 0x26, 0xe6, 0xa5, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x62, 0x5c,
	0x6c, 0x10, 0x83, 0x24, 0x98, 0xc0, 0x12, 0x50, 0x9e, 0x90, 0x14, 0x17, 0x47, 0x71, 0x5e, 0x62,
	0x41, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x33, 0x58, 0x06, 0xce, 0x57, 0xd2, 0xe1, 0x12, 0x42, 0xb6,
	0xa2, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0x64, 0x52, 0x71, 0x49, 0x62, 0x49, 0x69, 0x31, 0xd8,
	0x0a, 0x9e, 0x20, 0x28, 0xcf, 0x28, 0x95, 0x8b, 0x2f, 0xa8, 0x34, 0x0f, 0xa4, 0xd4, 0x19, 0x6a,
	0x67, 0x30, 0x97, 0x48, 0x50, 0x69, 0x1e, 0xc2, 0x08, 0x98, 0xb8, 0xb4, 0x1e, 0xcc, 0x17, 0x7a,
	0x18, 0x5e, 0x90, 0x92, 0xc1, 0x2e, 0x09, 0xb1, 0x5c, 0x89, 0x21, 0x89, 0x0d, 0x1c, 0x10, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x72, 0xa5, 0xd3, 0x1d, 0x01, 0x00, 0x00,
}
