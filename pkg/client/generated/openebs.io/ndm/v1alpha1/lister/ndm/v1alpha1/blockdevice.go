/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/ndm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BlockDeviceLister helps list BlockDevices.
// All objects returned here must be treated as read-only.
type BlockDeviceLister interface {
	// List lists all BlockDevices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BlockDevice, err error)
	// BlockDevices returns an object that can list and get BlockDevices.
	BlockDevices(namespace string) BlockDeviceNamespaceLister
	BlockDeviceListerExpansion
}

// blockDeviceLister implements the BlockDeviceLister interface.
type blockDeviceLister struct {
	indexer cache.Indexer
}

// NewBlockDeviceLister returns a new BlockDeviceLister.
func NewBlockDeviceLister(indexer cache.Indexer) BlockDeviceLister {
	return &blockDeviceLister{indexer: indexer}
}

// List lists all BlockDevices in the indexer.
func (s *blockDeviceLister) List(selector labels.Selector) (ret []*v1alpha1.BlockDevice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlockDevice))
	})
	return ret, err
}

// BlockDevices returns an object that can list and get BlockDevices.
func (s *blockDeviceLister) BlockDevices(namespace string) BlockDeviceNamespaceLister {
	return blockDeviceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlockDeviceNamespaceLister helps list and get BlockDevices.
// All objects returned here must be treated as read-only.
type BlockDeviceNamespaceLister interface {
	// List lists all BlockDevices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BlockDevice, err error)
	// Get retrieves the BlockDevice from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BlockDevice, error)
	BlockDeviceNamespaceListerExpansion
}

// blockDeviceNamespaceLister implements the BlockDeviceNamespaceLister
// interface.
type blockDeviceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BlockDevices in the indexer for a given namespace.
func (s blockDeviceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BlockDevice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BlockDevice))
	})
	return ret, err
}

// Get retrieves the BlockDevice from the indexer for a given namespace and name.
func (s blockDeviceNamespaceLister) Get(name string) (*v1alpha1.BlockDevice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("blockdevice"), name)
	}
	return obj.(*v1alpha1.BlockDevice), nil
}
