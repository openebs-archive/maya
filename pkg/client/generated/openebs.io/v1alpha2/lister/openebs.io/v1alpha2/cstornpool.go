/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CStorNPoolLister helps list CStorNPools.
type CStorNPoolLister interface {
	// List lists all CStorNPools in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.CStorNPool, err error)
	// CStorNPools returns an object that can list and get CStorNPools.
	CStorNPools(namespace string) CStorNPoolNamespaceLister
	CStorNPoolListerExpansion
}

// cStorNPoolLister implements the CStorNPoolLister interface.
type cStorNPoolLister struct {
	indexer cache.Indexer
}

// NewCStorNPoolLister returns a new CStorNPoolLister.
func NewCStorNPoolLister(indexer cache.Indexer) CStorNPoolLister {
	return &cStorNPoolLister{indexer: indexer}
}

// List lists all CStorNPools in the indexer.
func (s *cStorNPoolLister) List(selector labels.Selector) (ret []*v1alpha2.CStorNPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.CStorNPool))
	})
	return ret, err
}

// CStorNPools returns an object that can list and get CStorNPools.
func (s *cStorNPoolLister) CStorNPools(namespace string) CStorNPoolNamespaceLister {
	return cStorNPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CStorNPoolNamespaceLister helps list and get CStorNPools.
type CStorNPoolNamespaceLister interface {
	// List lists all CStorNPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.CStorNPool, err error)
	// Get retrieves the CStorNPool from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.CStorNPool, error)
	CStorNPoolNamespaceListerExpansion
}

// cStorNPoolNamespaceLister implements the CStorNPoolNamespaceLister
// interface.
type cStorNPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CStorNPools in the indexer for a given namespace.
func (s cStorNPoolNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.CStorNPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.CStorNPool))
	})
	return ret, err
}

// Get retrieves the CStorNPool from the indexer for a given namespace and name.
func (s cStorNPoolNamespaceLister) Get(name string) (*v1alpha2.CStorNPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("cstornpool"), name)
	}
	return obj.(*v1alpha2.CStorNPool), nil
}
