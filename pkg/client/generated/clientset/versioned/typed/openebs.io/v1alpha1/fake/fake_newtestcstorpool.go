/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNewTestCStorPools implements NewTestCStorPoolInterface
type FakeNewTestCStorPools struct {
	Fake *FakeOpenebsV1alpha1
	ns   string
}

var newtestcstorpoolsResource = schema.GroupVersionResource{Group: "openebs.io", Version: "v1alpha1", Resource: "newtestcstorpools"}

var newtestcstorpoolsKind = schema.GroupVersionKind{Group: "openebs.io", Version: "v1alpha1", Kind: "NewTestCStorPool"}

// Get takes name of the newTestCStorPool, and returns the corresponding newTestCStorPool object, and an error if there is any.
func (c *FakeNewTestCStorPools) Get(name string, options v1.GetOptions) (result *v1alpha1.NewTestCStorPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(newtestcstorpoolsResource, c.ns, name), &v1alpha1.NewTestCStorPool{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NewTestCStorPool), err
}

// List takes label and field selectors, and returns the list of NewTestCStorPools that match those selectors.
func (c *FakeNewTestCStorPools) List(opts v1.ListOptions) (result *v1alpha1.NewTestCStorPoolList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(newtestcstorpoolsResource, newtestcstorpoolsKind, c.ns, opts), &v1alpha1.NewTestCStorPoolList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.NewTestCStorPoolList{ListMeta: obj.(*v1alpha1.NewTestCStorPoolList).ListMeta}
	for _, item := range obj.(*v1alpha1.NewTestCStorPoolList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested newTestCStorPools.
func (c *FakeNewTestCStorPools) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(newtestcstorpoolsResource, c.ns, opts))

}

// Create takes the representation of a newTestCStorPool and creates it.  Returns the server's representation of the newTestCStorPool, and an error, if there is any.
func (c *FakeNewTestCStorPools) Create(newTestCStorPool *v1alpha1.NewTestCStorPool) (result *v1alpha1.NewTestCStorPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(newtestcstorpoolsResource, c.ns, newTestCStorPool), &v1alpha1.NewTestCStorPool{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NewTestCStorPool), err
}

// Update takes the representation of a newTestCStorPool and updates it. Returns the server's representation of the newTestCStorPool, and an error, if there is any.
func (c *FakeNewTestCStorPools) Update(newTestCStorPool *v1alpha1.NewTestCStorPool) (result *v1alpha1.NewTestCStorPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(newtestcstorpoolsResource, c.ns, newTestCStorPool), &v1alpha1.NewTestCStorPool{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NewTestCStorPool), err
}

// Delete takes name of the newTestCStorPool and deletes it. Returns an error if one occurs.
func (c *FakeNewTestCStorPools) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(newtestcstorpoolsResource, c.ns, name), &v1alpha1.NewTestCStorPool{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNewTestCStorPools) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(newtestcstorpoolsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.NewTestCStorPoolList{})
	return err
}

// Patch applies the patch and returns the patched newTestCStorPool.
func (c *FakeNewTestCStorPools) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NewTestCStorPool, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(newtestcstorpoolsResource, c.ns, name, data, subresources...), &v1alpha1.NewTestCStorPool{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NewTestCStorPool), err
}
