/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CSIVolumeInfoLister helps list CSIVolumeInfos.
type CSIVolumeInfoLister interface {
	// List lists all CSIVolumeInfos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CSIVolumeInfo, err error)
	// CSIVolumeInfos returns an object that can list and get CSIVolumeInfos.
	CSIVolumeInfos(namespace string) CSIVolumeInfoNamespaceLister
	CSIVolumeInfoListerExpansion
}

// cSIVolumeInfoLister implements the CSIVolumeInfoLister interface.
type cSIVolumeInfoLister struct {
	indexer cache.Indexer
}

// NewCSIVolumeInfoLister returns a new CSIVolumeInfoLister.
func NewCSIVolumeInfoLister(indexer cache.Indexer) CSIVolumeInfoLister {
	return &cSIVolumeInfoLister{indexer: indexer}
}

// List lists all CSIVolumeInfos in the indexer.
func (s *cSIVolumeInfoLister) List(selector labels.Selector) (ret []*v1alpha1.CSIVolumeInfo, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CSIVolumeInfo))
	})
	return ret, err
}

// CSIVolumeInfos returns an object that can list and get CSIVolumeInfos.
func (s *cSIVolumeInfoLister) CSIVolumeInfos(namespace string) CSIVolumeInfoNamespaceLister {
	return cSIVolumeInfoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CSIVolumeInfoNamespaceLister helps list and get CSIVolumeInfos.
type CSIVolumeInfoNamespaceLister interface {
	// List lists all CSIVolumeInfos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CSIVolumeInfo, err error)
	// Get retrieves the CSIVolumeInfo from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CSIVolumeInfo, error)
	CSIVolumeInfoNamespaceListerExpansion
}

// cSIVolumeInfoNamespaceLister implements the CSIVolumeInfoNamespaceLister
// interface.
type cSIVolumeInfoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CSIVolumeInfos in the indexer for a given namespace.
func (s cSIVolumeInfoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CSIVolumeInfo, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CSIVolumeInfo))
	})
	return ret, err
}

// Get retrieves the CSIVolumeInfo from the indexer for a given namespace and name.
func (s cSIVolumeInfoNamespaceLister) Get(name string) (*v1alpha1.CSIVolumeInfo, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("csivolumeinfo"), name)
	}
	return obj.(*v1alpha1.CSIVolumeInfo), nil
}
