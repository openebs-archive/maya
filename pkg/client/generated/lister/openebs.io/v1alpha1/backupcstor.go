/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupCStorLister helps list BackupCStors.
type BackupCStorLister interface {
	// List lists all BackupCStors in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.BackupCStor, err error)
	// BackupCStors returns an object that can list and get BackupCStors.
	BackupCStors(namespace string) BackupCStorNamespaceLister
	BackupCStorListerExpansion
}

// backupCStorLister implements the BackupCStorLister interface.
type backupCStorLister struct {
	indexer cache.Indexer
}

// NewBackupCStorLister returns a new BackupCStorLister.
func NewBackupCStorLister(indexer cache.Indexer) BackupCStorLister {
	return &backupCStorLister{indexer: indexer}
}

// List lists all BackupCStors in the indexer.
func (s *backupCStorLister) List(selector labels.Selector) (ret []*v1alpha1.BackupCStor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupCStor))
	})
	return ret, err
}

// BackupCStors returns an object that can list and get BackupCStors.
func (s *backupCStorLister) BackupCStors(namespace string) BackupCStorNamespaceLister {
	return backupCStorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupCStorNamespaceLister helps list and get BackupCStors.
type BackupCStorNamespaceLister interface {
	// List lists all BackupCStors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.BackupCStor, err error)
	// Get retrieves the BackupCStor from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.BackupCStor, error)
	BackupCStorNamespaceListerExpansion
}

// backupCStorNamespaceLister implements the BackupCStorNamespaceLister
// interface.
type backupCStorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupCStors in the indexer for a given namespace.
func (s backupCStorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupCStor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupCStor))
	})
	return ret, err
}

// Get retrieves the BackupCStor from the indexer for a given namespace and name.
func (s backupCStorNamespaceLister) Get(name string) (*v1alpha1.BackupCStor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupcstor"), name)
	}
	return obj.(*v1alpha1.BackupCStor), nil
}
