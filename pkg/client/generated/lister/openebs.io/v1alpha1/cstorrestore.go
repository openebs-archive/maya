/*
Copyright 2019 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CStorRestoreLister helps list CStorRestores.
type CStorRestoreLister interface {
	// List lists all CStorRestores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CStorRestore, err error)
	// CStorRestores returns an object that can list and get CStorRestores.
	CStorRestores(namespace string) CStorRestoreNamespaceLister
	CStorRestoreListerExpansion
}

// cStorRestoreLister implements the CStorRestoreLister interface.
type cStorRestoreLister struct {
	indexer cache.Indexer
}

// NewCStorRestoreLister returns a new CStorRestoreLister.
func NewCStorRestoreLister(indexer cache.Indexer) CStorRestoreLister {
	return &cStorRestoreLister{indexer: indexer}
}

// List lists all CStorRestores in the indexer.
func (s *cStorRestoreLister) List(selector labels.Selector) (ret []*v1alpha1.CStorRestore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorRestore))
	})
	return ret, err
}

// CStorRestores returns an object that can list and get CStorRestores.
func (s *cStorRestoreLister) CStorRestores(namespace string) CStorRestoreNamespaceLister {
	return cStorRestoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CStorRestoreNamespaceLister helps list and get CStorRestores.
type CStorRestoreNamespaceLister interface {
	// List lists all CStorRestores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CStorRestore, err error)
	// Get retrieves the CStorRestore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CStorRestore, error)
	CStorRestoreNamespaceListerExpansion
}

// cStorRestoreNamespaceLister implements the CStorRestoreNamespaceLister
// interface.
type cStorRestoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CStorRestores in the indexer for a given namespace.
func (s cStorRestoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CStorRestore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CStorRestore))
	})
	return ret, err
}

// Get retrieves the CStorRestore from the indexer for a given namespace and name.
func (s cStorRestoreNamespaceLister) Get(name string) (*v1alpha1.CStorRestore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cstorrestore"), name)
	}
	return obj.(*v1alpha1.CStorRestore), nil
}
